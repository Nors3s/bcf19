import logging
import requests
import feedparser
import os
from telegram import Bot
from telegram.ext import Updater, CommandHandler, CallbackContext
from telegram.update import Update
from datetime import datetime
import pytz
import json
import asyncio
from playwright.async_api import async_playwright

# --- Configuraci√≥n de variables de entorno ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@BurgosCF")
# Token de Bluesky (Access Token) y Refresh Token
BLUESKY_TOKEN = os.getenv("BLUESKY_TOKEN")
BLUESKY_REFRESH_TOKEN = os.getenv("BLUESKY_REFRESH_TOKEN")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN no est√° definido.")
if not BLUESKY_TOKEN:
    logging.warning("BLUESKY_TOKEN no est√° definido; la integraci√≥n de Bluesky no funcionar√°.")
if not BLUESKY_REFRESH_TOKEN:
    logging.warning("BLUESKY_REFRESH_TOKEN no est√° definido; no se podr√° renovar el token autom√°ticamente.")

# --- Configuraci√≥n de logging ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

bot = None
posted_titles = set()
posted_bluesky_ids = set()

# Variable global para el token actual de Bluesky
current_bluesky_token = BLUESKY_TOKEN

# --- Funci√≥n para renovar el token de Bluesky ---
def refresh_bluesky_token():
    global current_bluesky_token, BLUESKY_REFRESH_TOKEN
    refresh_url = "https://bsky.social/xrpc/com.atproto.server.refreshSession"  # Verifica este endpoint
    headers = {"Content-Type": "application/json", "Accept": "application/json"}
    payload = {
        "refreshToken": BLUESKY_REFRESH_TOKEN
    }
    try:
        response = requests.post(refresh_url, headers=headers, json=payload)
        if response.status_code == 200:
            data = response.json()
            new_access = data.get("accessJwt")
            new_refresh = data.get("refreshJwt")
            if new_access:
                current_bluesky_token = new_access
                BLUESKY_REFRESH_TOKEN = new_refresh  # Actualiza el refresh token, si se proporciona
                logger.info("Token de Bluesky renovado correctamente.")
                return True
            else:
                logger.error("No se recibi√≥ 'accessJwt' en la respuesta de renovaci√≥n.")
                return False
        else:
            logger.error("Error al renovar token de Bluesky: %s %s", response.status_code, response.text)
            return False
    except Exception as e:
        logger.error("Excepci√≥n al renovar token de Bluesky: %s", e)
        return False

# --- Funci√≥n para obtener posts de Bluesky ---
def fetch_bluesky_posts():
    url = "https://bsky.social/xrpc/app.bsky.feed.getActorTimeline"
    params = {
        "actor": "burgoscf.bsky.social",
        "limit": 10
    }
    headers = {
        "Authorization": f"Bearer {current_bluesky_token}",
        "Accept": "application/json"
    }
    try:
        response = requests.get(url, params=params, headers=headers)
        logger.info("Bluesky response status: %s", response.status_code)
        data = response.json()
        logger.info("Bluesky response JSON: %s", json.dumps(data, indent=2))
    except Exception as ex:
        logger.error("Error al obtener posts de Bluesky: %s", ex)
        return []
    # Si se recibe un error de token expirado, renovar y reintentar
    if response.status_code == 401 and data.get("error") == "ExpiredToken":
        logger.warning("Token expirado, renovando...")
        if refresh_bluesky_token():
            return fetch_bluesky_posts()  # reintentar con el nuevo token
        else:
            return []
    if "feed" in data:
        return data["feed"]
    else:
        logger.warning("La respuesta de Bluesky no contiene 'feed'.")
        return []

# --- Funci√≥n para enviar posts de Bluesky a Telegram ---
def send_bluesky_posts(context: CallbackContext):
    posts = fetch_bluesky_posts()
    if not posts:
        logger.warning("No se han obtenido posts de Bluesky.")
    for post in posts:
        logger.info("Procesando post: %s", post)
        post_data = post.get("post", {})
        post_id = post_data.get("cid") or post_data.get("uri")
        if not post_id:
            logger.warning("No se encontr√≥ ID en el post: %s", post)
            continue
        if post_id in posted_bluesky_ids:
            logger.info("El post %s ya fue enviado.", post_id)
            continue
        text = post_data.get("text", "")
        created_at = post_data.get("createdAt", "")
        message = f"üåÄ Bluesky:\n{text}\nüïí {created_at}"
        context.bot.send_message(chat_id=CHANNEL_ID, text=message)
        posted_bluesky_ids.add(post_id)

# --- Funci√≥n para obtener noticias desde feeds RSS ---
def fetch_news():
    mensajes = []
    RSS_FEEDS = [
        "https://www.burgosdeporte.com/index.php/feed/",
        "https://revistaforofos.com/feed/",
        "https://www.burgosconecta.es/burgoscf/rss",
        "https://www.diariodeburgos.es/seccion/burgos+cf/f%C3%BAtbol/deportes/rss"
    ]
    for feed_url in RSS_FEEDS:
        feed = feedparser.parse(feed_url)
        for entry in feed.entries[:5]:
            titulo = entry.title.lower()
            resumen = entry.summary.lower()
            if "burgos cf" in titulo or "burgos cf" in resumen:
                if entry.title not in posted_titles:
                    mensaje = f"üóûÔ∏è {entry.title}\n{entry.link}"
                    mensajes.append(mensaje)
                    posted_titles.add(entry.title)
    return mensajes

# --- Funci√≥n para enviar noticias a Telegram y Bluesky ---
def send_news(context: CallbackContext):
    noticias = fetch_news()
    for noticia in noticias:
        context.bot.send_message(chat_id=CHANNEL_ID, text=noticia)
        send_to_bluesky(noticia)

# --- Funci√≥n para enviar un mensaje a Bluesky ---
def send_to_bluesky(message: str):
    if not BLUESKY_TOKEN:
        logger.warning("BLUESKY_TOKEN no definido; no se enviar√° a Bluesky.")
        return
    url = "https://bsky.social/xrpc/app.bsky.feed.post"
    headers = {
        "Authorization": f"Bearer {current_bluesky_token}",
        "Content-Type": "application/json"
    }
    payload = {"text": message}
    try:
        response = requests.post(url, headers=headers, json=payload)
        if response.status_code == 200:
            logger.info("Mensaje enviado a Bluesky correctamente.")
        elif response.status_code == 401 and response.json().get("error") == "ExpiredToken":
            logger.warning("Token expirado al enviar mensaje a Bluesky, renovando...")
            if refresh_bluesky_token():
                # Reintentar el env√≠o
                headers["Authorization"] = f"Bearer {current_bluesky_token}"
                response = requests.post(url, headers=headers, json=payload)
                if response.status_code == 200:
                    logger.info("Mensaje enviado a Bluesky tras renovaci√≥n.")
                else:
                    logger.error("Error tras renovaci√≥n: %s %s", response.status_code, response.text)
            else:
                logger.error("No se pudo renovar el token de Bluesky.")
        else:
            logger.error("Error enviando mensaje a Bluesky: %s %s", response.status_code, response.text)
    except Exception as e:
        logger.error("Excepci√≥n al enviar mensaje a Bluesky: %s", e)

# --- Funci√≥n para la programaci√≥n de pr√≥ximos partidos (se mantiene, pero se puede omitir si no se desea) ---
def send_next_match(context: CallbackContext):
    # En este ejemplo, se omite la funcionalidad de pr√≥ximos partidos.
    pass

# --- Funci√≥n principal ---
def main():
    global bot
    bot = Bot(token=TELEGRAM_TOKEN)
    
    updater = Updater(token=TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher
    
    dispatcher.add_handler(CommandHandler("start", start))
    
    # Programa el env√≠o de noticias cada 1 hora
    updater.job_queue.run_repeating(send_news, interval=3600, first=10)
    # Programa el env√≠o de posts de Bluesky cada 1 hora
    updater.job_queue.run_repeating(send_bluesky_posts, interval=3600, first=20)
    # Programa el env√≠o del pr√≥ximo partido cada 4 horas (actualmente deshabilitado)
    updater.job_queue.run_repeating(send_next_match, interval=14400, first=30)
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
